using System;

namespace Project
{
    class Program
    {
        static void Main(string[] args)
        {
            // Array to be sorted
            int[] numbers = { 2, 14, 60, 53, 80, 99, 104, 10, 1, 9, 208, 21, 27 };
            Console.WriteLine("Original Array:");
            PrintArray(numbers);

            // Bubble Sort
            BubbleSort bubbleSort = new BubbleSort();
            Console.WriteLine("\nBubble Sort:");
            bubbleSort.Sort(numbers);
            PrintArray(numbers);

            // Insertion Sort
            InsertionSort insertionSort = new InsertionSort();
            Console.WriteLine("\nInsertion Sort:");
            insertionSort.Sort(numbers);
            PrintArray(numbers);

            // Selection Sort
            SelectionSort selectionSort = new SelectionSort();
            Console.WriteLine("\nSelection Sort:");
            selectionSort.Sort(numbers);
            PrintArray(numbers);
        }

        // Method to print array elements
        static void PrintArray(int[] arr)
        {
            foreach (var num in arr)
            {
                Console.Write(num + " ");
            }
            Console.WriteLine();
        }
    }

    // Abstract class for sorting algorithms
    abstract class SortingAlgorithm
    {
        // Method to sort an array (abstract)
        public void Sort(int[] array)
        {
            if (array == null || array.Length <= 1)
                return;

            SortArray(array);
        }

        // Abstract method to sort an array
        protected abstract void SortArray(int[] array);

        // Method to swap two elements in an array
        protected void Swap(int[] array, int i, int j)
        {
            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
    }

    // Bubble Sort implementation
    class BubbleSort : SortingAlgorithm
    {
        // Method to implement bubble sort
        protected override void SortArray(int[] array)
        {
            int length = array.Length;
            for (int i = 0; i < length - 1; i++)
            {
                for (int j = 0; j < length - i - 1; j++)
                {
                    if (array[j] > array[j + 1])
                    {
                        Swap(array, j, j + 1);
                    }
                }
            }
        }
    }

    // Insertion Sort implementation
    class InsertionSort : SortingAlgorithm
    {
        // Method to implement insertion sort
        protected override void SortArray(int[] array)
        {
            int length = array.Length;
            for (int i = 1; i < length; i++)
            {
                int key = array[i];
                int j = i - 1;
                while (j >= 0 && array[j] > key)
                {
                    array[j + 1] = array[j];
                    j = j - 1;
                }
                array[j + 1] = key;
            }
        }
    }

    // Selection Sort implementation
    class SelectionSort : SortingAlgorithm
    {
        // Method to implement selection sort
        protected override void SortArray(int[] array)
        {
            int length = array.Length;
            for (int i = 0; i < length - 1; i++)
            {
                int minIndex = i;
                for (int j = i + 1; j < length; j++)
                {
                    if (array[j] < array[minIndex])
                    {
                        minIndex = j;
                    }
                }
                Swap(array, i, minIndex);
            }
        }
    }
}
